// TODO: Can we avoid disabling all of these rules?
/* eslint-disable @typescript-eslint/no-unsafe-member-access -- Prompts breaks this but its an external module so there's nothing we can do about it  */
/* eslint-disable @typescript-eslint/no-unsafe-assignment -- Prompts breaks this but its an external module so there's nothing we can do about it */

import { basename, dirname } from "path";
import { Command, flags } from "@oclif/command";
import prompts from "prompts";
import { getStackNameFromFileName } from "../utils/args";
import type { CDKTemplate } from "../utils/cdk";
import { construct } from "../utils/cdk";
import { Imports } from "../utils/imports";

interface NewCommandConfig {
  outputPath: string;
  outputDir: string;
  outputFile: string;
  stackName: string;
}

interface NewCommandArgs {
  output: string;
  stack?: string;
}

export class NewCommand extends Command {
  static description = "Creates a new CDK stack";

  static flags = {
    version: flags.version({ char: "v" }),
    help: flags.help({ char: "h" }),
  };

  static args = [
    {
      name: "output",
      required: true,
      description: "The file to output CDK to",
    },
    {
      name: "stack",
      required: false,
      description: "A name to give the stack. Defaults to match the filename.",
    },
  ];

  imports = new Imports();

  template: CDKTemplate = {
    Parameters: {},
  };

  static getConfig = ({ args }: { args: NewCommandArgs }): NewCommandConfig => {
    const outputFile = basename(args.output);

    return {
      outputPath: args.output,
      outputDir: dirname(args.output),
      outputFile: outputFile,
      stackName: args.stack ?? getStackNameFromFileName(outputFile),
    };
  };

  async run(): Promise<void> {
    this.log("Starting CDK generator");

    const config = NewCommand.getConfig(this.parse(NewCommand));

    this.log(
      `New stack ${config.stackName} will be written to ${config.outputPath}`
    );

    const response = await prompts({
      type: "text",
      name: "stackName",
      message: "Name of the Stack",
      initial: config.stackName,
    });

    await this.getParameters();

    await construct({
      imports: this.imports,
      template: this.template,
      ...config,
      stackName: response.stackName,
      comment: "// This file was autogenerated using @guardian/cdk-cli",
    });
  }

  async getParameters(): Promise<void> {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, no-constant-condition -- while true for the win, what could go wrong?
    while (true) {
      const nameResponse = await prompts({
        type: "text",
        name: "parameterName",
        message: "Enter the name of the parameter (or hit enter to finish):",
      });

      if (!nameResponse.parameterName) break;

      const name = nameResponse.parameterName;

      // TODO: Can we be more clever here about the available types?
      const typeResponse = await prompts({
        type: "text",
        name: "parameterType",
        message: "Enter the parameter type:",
        initial: "string",
      });

      const type = typeResponse.parameterType as string;

      if (type.toLowerCase() === "string") {
        this.template.Parameters[name] = {
          parameterType: "GuStringParameter",
        };

        this.imports.addImport("@guardian/cdk/lib/constructs/core", [
          "GuStringParameter",
        ]);
      } else {
        this.template.Parameters[name] = {
          parameterType: "GuParameter",
          type,
        };

        this.imports.addImport("@guardian/cdk/lib/constructs/core", [
          "GuParameter",
        ]);
      }
    }
  }
}
